class tuple{A, B}
  attr first::A
  attr second::B
  def self(lhs::A, rhs::B) =
    first = lhs;
    second = rhs;
  end
  def getFirst() -> A = self.first; end
  def getSecond() -> B = self.second; end
end

class s <- tuple{int, string}
  def self(a::int, b::string) : super(a, b) = end
  def addAndGet1(x::int) -> int = 
    return first + x;
  end
  def concatAndGet2(x::string) -> string = 
    return second + x;
  end
end

class t{V} <- tuple{int, V}
  def self(a::int, b::V) : super(a, b) = end
  def getV() -> V = self.second; end
end

def makeTuple{A, B}(a::A, b::B) -> tuple{A, B} = 
  tuple{A, B}(a, b); 
end

x = t{int}(10, 10);
y::tuple{int, string} = makeTuple{int, string}(10, "foo");
z = makeTuple{int, int}(10, 20);
print (z);
