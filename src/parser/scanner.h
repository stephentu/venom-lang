#ifndef VENOM_SCANNER_H
#define VENOM_SCANNER_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL
#define YY_DECL \
    venom::Parser::token_type \
    venom::Scanner::lex( \
      venom::Parser::semantic_type* yylval, \
      venom::Parser::location_type* yylloc \
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer VenomFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include <parser/parser.h>

namespace venom {

/** Scanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to VenomFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the Scanner class. This is required
 * because the yylex() defined in VenomFlexLexer has no parameters. */
class Scanner : public VenomFlexLexer {
public:
    Scanner(std::istream* arg_yyin, std::ostream* arg_yyout = NULL);

    virtual ~Scanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual Parser::token_type lex(Parser::semantic_type* yylval,
                                   Parser::location_type* yylloc);

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);
};

} // namespace venom

#endif // VENOM_SCANNER_H
